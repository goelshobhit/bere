name: Continuous Integration and Delivery

on:
  push:
    tags:
      - 'v*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  APP_IMAGE: ${{secrets.DOCKER_USERNAME}}/social-app-api
  NGINX_IMAGE: ${{secrets.DOCKER_USERNAME}}/social-app-nginx

jobs:
  build:
    name: Build & Publish to Docker Hub Registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build_node
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile.node
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.APP_IMAGE }}:${{ steps.vars.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build_node.outputs.digest }}
      - name: Build and push
        id: docker_build_nginx
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile.nginx
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.NGINX_IMAGE }}:${{ steps.vars.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build_nginx.outputs.digest }}
  deploy:
    name: Deploy to Google Cloud
    runs-on: ubuntu-latest
    needs: build
    # if: github.ref == 'refs/heads/master'
    steps:
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo APP_IMAGE=${{ env.APP_IMAGE }} >> .env
          echo TAG=${{ steps.vars.outputs.tag }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo DOCKER_NAMESPACE=${{ secrets.DOCKER_NAMESPACE }} >> .env

          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env

          echo SITE_API_URL=${{ secrets.SITE_API_URL }} >> .env

          echo PGHOST=${{ secrets.PGHOST }} >> .env
          echo PGUSER=${{ secrets.PGUSER }} >> .env
          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env
          echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env
          echo PGPORT=${{ secrets.PGPORT }} >> .env
          echo DIALECT=${{ secrets.DIALECT }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env

          echo AD_SMTP_HOST=${{ secrets.AD_SMTP_HOST }} >> .env
          echo AD_SMTP_PASSWORD=${{ secrets.AD_SMTP_PASSWORD }} >> .env
          echo AD_SMTP_PORT=${{ secrets.AD_SMTP_PORT }} >> .env
          echo AD_SMTP_USER=${{ secrets.AD_SMTP_USER }} >> .env

          echo CONST_VERSION=${{ secrets.CONST_VERSION }} >> .env

          echo JWT_ACCESS_KEY=${{ secrets.JWT_ACCESS_KEY }} >> .env
          echo JWT_KEY_EXPIRY_TIME=${{ secrets.JWT_KEY_EXPIRY_TIME }} >> .env

          echo TOKEN_HEADER=${{ secrets.TOKEN_HEADER }} >> .env

          echo TWILIO_ACC_ID=${{ secrets.TWILIO_ACC_ID }} >> .env
          echo TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }} >> .env
          echo TWILIO_FROM=${{ secrets.TWILIO_FROM }} >> .env

          echo UKEY_HEADER=${{ secrets.UKEY_HEADER }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on Google Cloud
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -rp ./.env ./docker-compose.yml ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }}:/app
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            cd /app
            source .env
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker pull $APP_IMAGE:$TAG
            docker pull $NGINX_IMAGE:$TAG
            docker-compose -f docker-compose.yml up --build --remove-orphans -d
          ENDSSH
